{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecc23194-0a52-41fe-879f-e9fba1cdca04",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import ScalarFormatter \n",
    "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
    "import plotly.express as px\n",
    "import plotly.subplots\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from tabulate import tabulate\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6b51bd45-8972-43c1-bf72-6abd3022fec7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team Name</th>\n",
       "      <th>country</th>\n",
       "      <th>Well-being</th>\n",
       "      <th>Needs</th>\n",
       "      <th>Engagement</th>\n",
       "      <th>Autonomy</th>\n",
       "      <th>Belonging</th>\n",
       "      <th>Competence</th>\n",
       "      <th>Leadership</th>\n",
       "      <th>Management</th>\n",
       "      <th>...</th>\n",
       "      <th>Autonomous</th>\n",
       "      <th>Belongs</th>\n",
       "      <th>LeaderOK</th>\n",
       "      <th>Understood</th>\n",
       "      <th>Encouraged</th>\n",
       "      <th>Heard</th>\n",
       "      <th>ManagementOK</th>\n",
       "      <th>ReturnsOK</th>\n",
       "      <th>RewardsOK</th>\n",
       "      <th>StatusOK</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>3.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>3.7</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.8</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>3.9</td>\n",
       "      <td>3.9</td>\n",
       "      <td>3.4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.6</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>4.6</td>\n",
       "      <td>4.8</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.7</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3.3</td>\n",
       "      <td>4.3</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Gambian RC</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>4.6</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4.5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7 rows Ã— 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Team Name country  Well-being  Needs  Engagement  Autonomy  Belonging  \\\n",
       "0  Gambian RC  Gambia         3.2    4.9         4.4       5.0        5.0   \n",
       "1  Gambian RC  Gambia         3.7    4.5         4.8       4.7        4.3   \n",
       "2  Gambian RC  Gambia         3.9    3.9         3.4       4.0        4.0   \n",
       "3  Gambian RC  Gambia         3.7    3.6         4.2       3.7        4.0   \n",
       "4  Gambian RC  Gambia         4.6    4.8         4.4       4.7        4.7   \n",
       "5  Gambian RC  Gambia         3.7    3.8         4.2       3.3        4.3   \n",
       "6  Gambian RC  Gambia         4.6    4.4         4.8       4.7        4.7   \n",
       "\n",
       "   Competence  Leadership  Management  ...  Autonomous  Belongs  LeaderOK  \\\n",
       "0         4.5         4.0         4.5  ...           1        1         1   \n",
       "1         4.5         4.7         4.3  ...           1        1         1   \n",
       "2         3.5         1.0         3.5  ...           1        1         0   \n",
       "3         3.0         4.0         4.3  ...           1        1         1   \n",
       "4         5.0         4.0         4.0  ...           1        1         1   \n",
       "5         3.5         3.3         4.0  ...           0        1         0   \n",
       "6         3.5         4.3         4.5  ...           1        1         1   \n",
       "\n",
       "   Understood  Encouraged  Heard  ManagementOK  ReturnsOK  RewardsOK  StatusOK  \n",
       "0           0           1      1             1          1          1         1  \n",
       "1           1           1      1             1          1          0         1  \n",
       "2           0           0      0             1          0          1         1  \n",
       "3           1           1      1             1          1          1         1  \n",
       "4           1           1      1             1          1          0         1  \n",
       "5           1           0      0             1          1          0         1  \n",
       "6           1           1      1             1          1          1         1  \n",
       "\n",
       "[7 rows x 55 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dummy variables for motivational outcomes (Y) and independent variables (x)\n",
    "df = pd.read_csv(\"C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/ungrouped_ALL.csv\")\n",
    "\n",
    "# first we select 2 types of outcome variable - on 1-5 and 1-7 scales\n",
    "# we create dictionary to recode the values in each category of outcome variables\n",
    "\n",
    "columns5 = ['Satisfied',\n",
    "            'Stay',\n",
    "            'Values',\n",
    "            'Meaning',\n",
    "            'Ideas',\n",
    "            ]\n",
    "\n",
    "columns7 = ['Strong',\n",
    "           'Drained',\n",
    "           'Frustrated']\n",
    "\n",
    "# we create dictionary to recode the values in each category of outcome variables\n",
    "# neutral (3) is considered positive, i.e. Y=1 if neutral)\n",
    "mapping5 = {\n",
    "    5: 1,\n",
    "    4: 1,\n",
    "    3: 1,\n",
    "    2: 0,\n",
    "    1: 0\n",
    "}\n",
    "\n",
    "# NB: this is the current coding for frequencies:\n",
    "#    \"Every day\": 7,\n",
    "#    \"Very often\": 6,\n",
    "#    \"Often\": 5,\n",
    "#    \"Sometimes\": 4,\n",
    "#    \"Rarely\": 3,\n",
    "#    \"Almost never\": 2,\n",
    "#    \"Never\": 1\n",
    "# We set the cut off point between 4 (sometimes) and 5 (often), i.e. Y=1 if \"often\"\n",
    "mapping7 = {\n",
    "    7: 1,\n",
    "    6: 1,\n",
    "    5: 1,\n",
    "    4: 0,\n",
    "    3: 0,\n",
    "    2: 0,\n",
    "    1: 0\n",
    "}\n",
    "\n",
    "df[columns5] = df[columns5].replace(mapping5)\n",
    "df[columns7] = df[columns7].replace(mapping7)\n",
    "\n",
    "df.head(20)\n",
    "\n",
    "#Independent Variables to convert into dummy variables for Odds Ratio computations\n",
    "# we create dictionary to recode the values in each category of outcome variables\n",
    "# cutoff point: 3.5 and above considered positive.\n",
    "# We keep the original continous variables in the data.\n",
    "\n",
    "df['Well'] = df['Well-being']\n",
    "df['3Needsmet'] = df['Needs']\n",
    "df['Autonomous'] = df['Autonomy']\n",
    "df['Belongs'] = df['Belonging']\n",
    "df['Competent'] = df['Competence']\n",
    "df['LeaderOK'] = df['Leadership']\n",
    "df['Understood'] = df['Understands']\n",
    "df['Encouraged'] = df['Encourages']\n",
    "df['Heard'] = df['Listens']\n",
    "df['ManagementOK'] = df['Management']\n",
    "df['ReturnsOK'] = df['Returns']\n",
    "df['RewardsOK'] = df['Rewards']\n",
    "df['StatusOK'] = df['Status']\n",
    "   \n",
    "DummyColumns = [\n",
    "    'Well',\n",
    "    '3Needsmet',\n",
    "    'Autonomous',\n",
    "    'Belongs',\n",
    "    'Competent',\n",
    "    'LeaderOK',\n",
    "    'Understood',\n",
    "    'Encouraged',\n",
    "    'Heard',\n",
    "    'ManagementOK',\n",
    "    'ReturnsOK',\n",
    "    'RewardsOK',\n",
    "    'StatusOK'\n",
    "    ] \n",
    "\n",
    "# Calculate the rounded value row by row and assign it to a new dummy variable column\n",
    "# By rounding we can have 3.5 and above as 1  and below 3.5 as 0\n",
    "df[DummyColumns] = df[DummyColumns].round(0)\n",
    "df[DummyColumns] = df[DummyColumns].astype(int)\n",
    "df\n",
    "mappingX = {\n",
    "    5: 1,\n",
    "    4: 1,\n",
    "    3: 0,\n",
    "    2: 0,\n",
    "    1: 0\n",
    "}\n",
    "\n",
    "df[DummyColumns] = df[DummyColumns].replace(mappingX)\n",
    "\n",
    "#for Var_x in df[DummyColumn]:\n",
    "#    Var_x = float(Var_x)\n",
    "#    if Var_x < 4 :\n",
    "#        Var_x = 0\n",
    "#    else: Var_x = 1\n",
    "    \n",
    "#Variables to keep for logistic regressions\n",
    "columns = ['Strong', 'Drained', 'Frustrated',\n",
    "           'Satisfied', 'Stay', 'Values', 'Meaning', 'Ideas',\n",
    "           'country', 'Staff', 'Volunteer',\n",
    "           'Well-being', 'Needs', 'Autonomy', 'Belonging', 'Competence',\n",
    "           'Leadership', 'Understands', 'Encourages', 'Listens',\n",
    "           'Management', 'Returns', 'Rewards', 'Status',\n",
    "           'Well', '3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK'\n",
    "          ]\n",
    "\n",
    "LogReg_df=df[columns]\n",
    "\n",
    "\n",
    "LogReg_df.to_csv('LogReg_df.csv', index=False)\n",
    "df.head(7)\n",
    "\n",
    "#df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc81edec-5742-4118-a561-3d458762b858",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6588 entries, 0 to 6587\n",
      "Data columns (total 55 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   Team Name         6588 non-null   object \n",
      " 1   country           6588 non-null   object \n",
      " 2   Well-being        6588 non-null   float64\n",
      " 3   Needs             6588 non-null   float64\n",
      " 4   Engagement        6588 non-null   float64\n",
      " 5   Autonomy          6588 non-null   float64\n",
      " 6   Belonging         6588 non-null   float64\n",
      " 7   Competence        6588 non-null   float64\n",
      " 8   Leadership        6588 non-null   float64\n",
      " 9   Management        6588 non-null   float64\n",
      " 10  Returns           6588 non-null   float64\n",
      " 11  Rewards           6588 non-null   float64\n",
      " 12  Status            6588 non-null   float64\n",
      " 13  Myself            6588 non-null   int64  \n",
      " 14  Tasks             6588 non-null   int64  \n",
      " 15  Free              6588 non-null   int64  \n",
      " 16  Mastery           6588 non-null   int64  \n",
      " 17  Competent         6588 non-null   int32  \n",
      " 18  Learn             6588 non-null   int64  \n",
      " 19  Group             6588 non-null   int64  \n",
      " 20  Talk              6588 non-null   int64  \n",
      " 21  Care              6588 non-null   int64  \n",
      " 22  Satisfied         6588 non-null   int64  \n",
      " 23  Meaning           6588 non-null   int64  \n",
      " 24  Stay              6588 non-null   int64  \n",
      " 25  Ideas             6588 non-null   int64  \n",
      " 26  Values            6588 non-null   int64  \n",
      " 27  Understands       6588 non-null   int64  \n",
      " 28  Encourages        6588 non-null   int64  \n",
      " 29  Listens           6588 non-null   int64  \n",
      " 30  Network           6588 non-null   int64  \n",
      " 31  Friendly          6588 non-null   int64  \n",
      " 32  Team              6588 non-null   int64  \n",
      " 33  Appreciated       6588 non-null   int64  \n",
      " 34  Responsibilities  6588 non-null   int64  \n",
      " 35  Work              6588 non-null   int64  \n",
      " 36  Impact            6588 non-null   int64  \n",
      " 37  Strong            6588 non-null   int64  \n",
      " 38  Drained           6588 non-null   int64  \n",
      " 39  Frustrated        6588 non-null   int64  \n",
      " 40  Volunteer         6588 non-null   int64  \n",
      " 41  Staff             6588 non-null   int64  \n",
      " 42  Position          6588 non-null   object \n",
      " 43  Well              6588 non-null   int32  \n",
      " 44  3Needsmet         6588 non-null   int32  \n",
      " 45  Autonomous        6588 non-null   int32  \n",
      " 46  Belongs           6588 non-null   int32  \n",
      " 47  LeaderOK          6588 non-null   int32  \n",
      " 48  Understood        6588 non-null   int32  \n",
      " 49  Encouraged        6588 non-null   int32  \n",
      " 50  Heard             6588 non-null   int32  \n",
      " 51  ManagementOK      6588 non-null   int32  \n",
      " 52  ReturnsOK         6588 non-null   int32  \n",
      " 53  RewardsOK         6588 non-null   int32  \n",
      " 54  StatusOK          6588 non-null   int32  \n",
      "dtypes: float64(11), int32(13), int64(28), object(3)\n",
      "memory usage: 2.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "625fca83-6455-4f1a-b33b-d1ad7e8f94b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Leadership</th>\n",
       "      <th>Management</th>\n",
       "      <th>Staff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stay</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.183259</td>\n",
       "      <td>3.423884</td>\n",
       "      <td>0.133929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.138143</td>\n",
       "      <td>4.182134</td>\n",
       "      <td>0.092508</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Leadership  Management     Staff\n",
       "Stay                                  \n",
       "0       3.183259    3.423884  0.133929\n",
       "1       4.138143    4.182134  0.092508"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Model 1: Y= Stay X='Leadership', 'Management', 'Staff'\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "                 \n",
    "columns = ['Stay',\n",
    "           'Leadership', 'Management', 'Staff']\n",
    "\n",
    "df=df[columns]\n",
    "\n",
    "df.groupby('Stay').mean(columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54fc45d0-0cf1-4f25-84ac-f40bda8d0f9d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#  Model 1: Y= Stay X='Leadership', 'Management', 'Staff'\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "# Count the total number of respondents (n)\n",
    "n = df['Volunteer'].sum() + df['Staff'].sum()\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Leadership', 'Management', 'Staff']\n",
    "\n",
    "df=df[columns]\n",
    "\n",
    "df.groupby('Stay').mean(columns)\n",
    "\n",
    "sns.countplot(data=df, x='Leadership', hue='Stay')\n",
    "plt.title(f'Effects of Leadership on wanting to stay another year (n={n})')\n",
    "plt.xlabel('Leadership scores')\n",
    "plt.ylabel('Number of individuals')\n",
    "plt.savefig('LogReg_Stay-Lead')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd02cb4d-91c2-4267-a7b7-061611ee4fa3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Well-being</th>\n",
       "      <th>Staff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stay</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.533929</td>\n",
       "      <td>0.133929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.911270</td>\n",
       "      <td>0.092508</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Well-being     Staff\n",
       "Stay                      \n",
       "0       3.533929  0.133929\n",
       "1       3.911270  0.092508"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Model 1.1 : Y= Stay X='Wellbeing', 'Staff'\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Well-being', 'Staff']\n",
    "\n",
    "df=df[columns]\n",
    "\n",
    "df.groupby('Stay').mean(columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "667c0017-5ce9-44bf-9f05-aeed5f7f3fd7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 568 0.11 388 5572 0.07 1.5\n"
     ]
    }
   ],
   "source": [
    "#  Risk and Odds ratios\n",
    "#  first method using contingency table, variable by variable\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Staff']\n",
    "\n",
    "df_count=df[columns].sum()\n",
    "#print(df_count)\n",
    "\n",
    "\n",
    "df['Staff_Stay'] = 0\n",
    "df['Staff_Leave'] = 0\n",
    "df['Volunteer_Stay'] = 0\n",
    "df['Volunteer_Leave'] = 0\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Staff',\n",
    "            'Staff_Stay',\n",
    "            'Staff_Leave',\n",
    "            'Volunteer_Stay',\n",
    "            'Volunteer_Leave']\n",
    "\n",
    "# convert variables to integer (for some reason they are strings)\n",
    "df[columns] = df[columns].astype(int)\n",
    "           \n",
    "df['Staff_Stay'] = 1 * ((df['Staff'] == 1) & (df['Stay'] == 1))\n",
    "df['Staff_Leave'] = 1 * ((df['Staff'] == 1) & (df['Stay'] == 0))\n",
    "df['Volunteer_Stay'] = 1 * ((df['Staff'] == 0) & (df['Stay'] == 1))\n",
    "df['Volunteer_Leave'] = 1 * ((df['Staff'] == 0) & (df['Stay'] == 0))\n",
    "        \n",
    "#df.tail()\n",
    "\n",
    "# sums for 2 by 2 contingency table a, b, c, d\n",
    "# How much more likely are staff will leave than volunteers?\n",
    "\n",
    "a = df['Staff_Leave'].sum()\n",
    "b = df['Staff_Stay'].sum()\n",
    "c = df['Volunteer_Leave'].sum()\n",
    "d = df['Volunteer_Stay'].sum()\n",
    "\n",
    "# computing the relative risks of leaving for staff and volunteers and the odds ratio: \n",
    "RR_Staff = a/b\n",
    "RR_Volunteers = c/d\n",
    "OR = (a/b)/(c/d)\n",
    "print(a, b, round(RR_Staff,2), c, d, round(RR_Volunteers,2), round(OR,1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "11f5eda5-280f-4822-b26b-d176571d81ca",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Odds for staff staying, compared to voluneers: [[0.69533858]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "#  Odds ratios,\n",
    "# 2nd method using logistic regression, variable by variable\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Staff']\n",
    "df=df[columns]\n",
    "clf = LogisticRegression()\n",
    "clf.fit(df[['Stay']],df[['Staff']].values)\n",
    "odds_ratio=np.exp(clf.coef_)\n",
    "\n",
    "print('Odds for staff staying, compared to voluneers:', odds_ratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b42b28df-7e9e-4c5c-b311-86b09fc0ecdd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay Staff [[0.65919712]]\n",
      "Stay 3Needsmet [[6.37414681]]\n",
      "Stay Autonomous [[5.32093024]]\n",
      "Stay Belongs [[3.84662928]]\n",
      "Stay Competent [[4.74532824]]\n",
      "Stay LeaderOK [[3.87498261]]\n",
      "Stay Understood [[3.72756426]]\n",
      "Stay Encouraged [[3.14580731]]\n",
      "Stay Heard [[3.60340906]]\n",
      "Stay ManagementOK [[6.11982859]]\n",
      "Stay ReturnsOK [[5.77028353]]\n",
      "Stay RewardsOK [[3.41019543]]\n",
      "Stay StatusOK [[5.58766487]]\n",
      "Drained Staff [[1.81865738]]\n",
      "Drained 3Needsmet [[0.45080603]]\n",
      "Drained Autonomous [[0.44385253]]\n",
      "Drained Belongs [[0.65389605]]\n",
      "Drained Competent [[0.65510615]]\n",
      "Drained LeaderOK [[0.74225935]]\n",
      "Drained Understood [[0.65571596]]\n",
      "Drained Encouraged [[0.85192808]]\n",
      "Drained Heard [[0.80776692]]\n",
      "Drained ManagementOK [[0.55520794]]\n",
      "Drained ReturnsOK [[0.73466011]]\n",
      "Drained RewardsOK [[0.76156539]]\n",
      "Drained StatusOK [[0.7198433]]\n",
      "Frustrated Staff [[2.67501568]]\n",
      "Frustrated 3Needsmet [[0.25468305]]\n",
      "Frustrated Autonomous [[0.27010604]]\n",
      "Frustrated Belongs [[0.39563406]]\n",
      "Frustrated Competent [[0.42610157]]\n",
      "Frustrated LeaderOK [[0.43239576]]\n",
      "Frustrated Understood [[0.46151132]]\n",
      "Frustrated Encouraged [[0.47501669]]\n",
      "Frustrated Heard [[0.46126503]]\n",
      "Frustrated ManagementOK [[0.28903186]]\n",
      "Frustrated ReturnsOK [[0.37467822]]\n",
      "Frustrated RewardsOK [[0.49883289]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Frustrated StatusOK [[0.39729911]]\n",
      "Satisfied Staff [[0.42982768]]\n",
      "Satisfied 3Needsmet [[23.03664855]]\n",
      "Satisfied Autonomous [[19.03470938]]\n",
      "Satisfied Belongs [[12.66860653]]\n",
      "Satisfied Competent [[10.03739578]]\n",
      "Satisfied LeaderOK [[11.38277398]]\n",
      "Satisfied Understood [[10.31689069]]\n",
      "Satisfied Encouraged [[7.88685289]]\n",
      "Satisfied Heard [[8.92422872]]\n",
      "Satisfied ManagementOK [[22.21295176]]\n",
      "Satisfied ReturnsOK [[13.56291043]]\n",
      "Satisfied RewardsOK [[14.85839363]]\n",
      "Satisfied StatusOK [[10.83126541]]\n",
      "Ideas Staff [[1.49082609]]\n",
      "Ideas 3Needsmet [[9.85129404]]\n",
      "Ideas Autonomous [[6.96813795]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ideas Belongs [[11.14171833]]\n",
      "Ideas Competent [[6.28972597]]\n",
      "Ideas LeaderOK [[7.37427678]]\n",
      "Ideas Understood [[5.72107728]]\n",
      "Ideas Encouraged [[6.51789794]]\n",
      "Ideas Heard [[7.57424516]]\n",
      "Ideas ManagementOK [[8.77527141]]\n",
      "Ideas ReturnsOK [[12.79333162]]\n",
      "Ideas RewardsOK [[3.7787574]]\n",
      "Ideas StatusOK [[7.42615896]]\n",
      "Values Staff [[0.61812661]]\n",
      "Values 3Needsmet [[12.05458147]]\n",
      "Values Autonomous [[9.19695875]]\n",
      "Values Belongs [[10.79583367]]\n",
      "Values Competent [[5.61588725]]\n",
      "Values LeaderOK [[7.34439809]]\n",
      "Values Understood [[6.8458409]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Values Encouraged [[5.07586163]]\n",
      "Values Heard [[5.83428205]]\n",
      "Values ManagementOK [[8.61479131]]\n",
      "Values ReturnsOK [[6.99136489]]\n",
      "Values RewardsOK [[5.29480825]]\n",
      "Values StatusOK [[7.77417212]]\n",
      "Meaning Staff [[0.8026106]]\n",
      "Meaning 3Needsmet [[14.83811952]]\n",
      "Meaning Autonomous [[9.31300145]]\n",
      "Meaning Belongs [[19.96432013]]\n",
      "Meaning Competent [[7.34542759]]\n",
      "Meaning LeaderOK [[8.7816082]]\n",
      "Meaning Understood [[8.5696651]]\n",
      "Meaning Encouraged [[6.35135029]]\n",
      "Meaning Heard [[7.57202688]]\n",
      "Meaning ManagementOK [[10.74344447]]\n",
      "Meaning ReturnsOK [[12.4582576]]\n",
      "Meaning RewardsOK [[5.24153168]]\n",
      "Meaning StatusOK [[8.63592133]]\n",
      "Outcome        Drained  Frustrated      Ideas    Meaning  Satisfied      Stay  \\\n",
      "Factor                                                                          \n",
      "3Needsmet     0.450806    0.254683   9.851294  14.838120  23.036649  6.374147   \n",
      "Autonomous    0.443853    0.270106   6.968138   9.313001  19.034709  5.320930   \n",
      "Belongs       0.653896    0.395634  11.141718  19.964320  12.668607  3.846629   \n",
      "Competent     0.655106    0.426102   6.289726   7.345428  10.037396  4.745328   \n",
      "Encouraged    0.851928    0.475017   6.517898   6.351350   7.886853  3.145807   \n",
      "Heard         0.807767    0.461265   7.574245   7.572027   8.924229  3.603409   \n",
      "LeaderOK      0.742259    0.432396   7.374277   8.781608  11.382774  3.874983   \n",
      "ManagementOK  0.555208    0.289032   8.775271  10.743444  22.212952  6.119829   \n",
      "ReturnsOK     0.734660    0.374678  12.793332  12.458258  13.562910  5.770284   \n",
      "RewardsOK     0.761565    0.498833   3.778757   5.241532  14.858394  3.410195   \n",
      "Staff         1.818657    2.675016   1.490826   0.802611   0.429828  0.659197   \n",
      "StatusOK      0.719843    0.397299   7.426159   8.635921  10.831265  5.587665   \n",
      "Understood    0.655716    0.461511   5.721077   8.569665  10.316891  3.727564   \n",
      "\n",
      "Outcome          Values  \n",
      "Factor                   \n",
      "3Needsmet     12.054581  \n",
      "Autonomous     9.196959  \n",
      "Belongs       10.795834  \n",
      "Competent      5.615887  \n",
      "Encouraged     5.075862  \n",
      "Heard          5.834282  \n",
      "LeaderOK       7.344398  \n",
      "ManagementOK   8.614791  \n",
      "ReturnsOK      6.991365  \n",
      "RewardsOK      5.294808  \n",
      "Staff          0.618127  \n",
      "StatusOK       7.774172  \n",
      "Understood     6.845841  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\3046525850.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    }
   ],
   "source": [
    "#  Odds ratios for all outcome variables:\n",
    "#  staying, being satisfied, sharing ideas, values, meaning,\n",
    "#  being frustrated being drained\n",
    "#  and selected independent variables: Needs, Management, leadership, etc.\n",
    "#  using logistic regression\n",
    "#  use this to prepare odds ratio pivot table for VOL and STAFF\n",
    "\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied', 'Ideas', 'Values', 'Meaning'] \n",
    "columnX = ['Staff', '3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Factor', 'Odds ratio'])\n",
    "\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "# Save the results DataFrame to a CSV file\n",
    "results_df.to_csv('odds_ratios_ALL.csv', index=False)\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = results_df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_ALL.xlsx', index=False)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9f925900",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay Staff [[0.65919712]]\n",
      "Stay 3Needsmet [[6.37414681]]\n",
      "Stay Autonomous [[5.32093024]]\n",
      "Stay Belongs [[3.84662928]]\n",
      "Stay Competent [[4.74532824]]\n",
      "Stay LeaderOK [[3.87498261]]\n",
      "Stay Understood [[3.72756426]]\n",
      "Stay Encouraged [[3.14580731]]\n",
      "Stay Heard [[3.60340906]]\n",
      "Stay ManagementOK [[6.11982859]]\n",
      "Stay ReturnsOK [[5.77028353]]\n",
      "Stay RewardsOK [[3.41019543]]\n",
      "Stay StatusOK [[5.58766487]]\n",
      "Drained Staff [[1.81865738]]\n",
      "Drained 3Needsmet [[0.45080603]]\n",
      "Drained Autonomous [[0.44385253]]\n",
      "Drained Belongs [[0.65389605]]\n",
      "Drained Competent [[0.65510615]]\n",
      "Drained LeaderOK [[0.74225935]]\n",
      "Drained Understood [[0.65571596]]\n",
      "Drained Encouraged [[0.85192808]]\n",
      "Drained Heard [[0.80776692]]\n",
      "Drained ManagementOK [[0.55520794]]\n",
      "Drained ReturnsOK [[0.73466011]]\n",
      "Drained RewardsOK [[0.76156539]]\n",
      "Drained StatusOK [[0.7198433]]\n",
      "Frustrated Staff [[2.67501568]]\n",
      "Frustrated 3Needsmet [[0.25468305]]\n",
      "Frustrated Autonomous [[0.27010604]]\n",
      "Frustrated Belongs [[0.39563406]]\n",
      "Frustrated Competent [[0.42610157]]\n",
      "Frustrated LeaderOK [[0.43239576]]\n",
      "Frustrated Understood [[0.46151132]]\n",
      "Frustrated Encouraged [[0.47501669]]\n",
      "Frustrated Heard [[0.46126503]]\n",
      "Frustrated ManagementOK [[0.28903186]]\n",
      "Frustrated ReturnsOK [[0.37467822]]\n",
      "Frustrated RewardsOK [[0.49883289]]\n",
      "Frustrated StatusOK [[0.39729911]]\n",
      "Satisfied Staff [[0.42982768]]\n",
      "Satisfied 3Needsmet [[23.03664855]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Satisfied Autonomous [[19.03470938]]\n",
      "Satisfied Belongs [[12.66860653]]\n",
      "Satisfied Competent [[10.03739578]]\n",
      "Satisfied LeaderOK [[11.38277398]]\n",
      "Satisfied Understood [[10.31689069]]\n",
      "Satisfied Encouraged [[7.88685289]]\n",
      "Satisfied Heard [[8.92422872]]\n",
      "Satisfied ManagementOK [[22.21295176]]\n",
      "Satisfied ReturnsOK [[13.56291043]]\n",
      "Satisfied RewardsOK [[14.85839363]]\n",
      "Satisfied StatusOK [[10.83126541]]\n",
      "Outcome        Drained  Frustrated  Satisfied      Stay\n",
      "Factor                                                 \n",
      "3Needsmet     0.450806    0.254683  23.036649  6.374147\n",
      "Autonomous    0.443853    0.270106  19.034709  5.320930\n",
      "Belongs       0.653896    0.395634  12.668607  3.846629\n",
      "Competent     0.655106    0.426102  10.037396  4.745328\n",
      "Encouraged    0.851928    0.475017   7.886853  3.145807\n",
      "Heard         0.807767    0.461265   8.924229  3.603409\n",
      "LeaderOK      0.742259    0.432396  11.382774  3.874983\n",
      "ManagementOK  0.555208    0.289032  22.212952  6.119829\n",
      "ReturnsOK     0.734660    0.374678  13.562910  5.770284\n",
      "RewardsOK     0.761565    0.498833  14.858394  3.410195\n",
      "Staff         1.818657    2.675016   0.429828  0.659197\n",
      "StatusOK      0.719843    0.397299  10.831265  5.587665\n",
      "Understood    0.655716    0.461511  10.316891  3.727564\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\500495742.py:31: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    }
   ],
   "source": [
    "#  Odds ratios for staying, being staisfied, being frustrated  and being drained\n",
    "#  and selected independent variables: Needs, Management, leadership\n",
    "#  using logistic regression\n",
    "#  use this to prepare odds ratio pivot table for VOL and STAFF\n",
    "\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied'] \n",
    "columnX = ['Staff', '3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Factor', 'Odds ratio'])\n",
    "\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "# Save the results DataFrame to a CSV file\n",
    "results_df.to_csv('odds_ratios_ALL.csv', index=False)\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = results_df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_ALL.xlsx', index=False)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "65409d40-af43-43ae-badb-cc91716f8436",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcome        Drained  Frustrated  Satisfied      Stay\n",
      "Factor                                                 \n",
      "3Needsmet     0.450806    0.254683  23.036649  6.374147\n",
      "Autonomous    0.443853    0.270106  19.034709  5.320930\n",
      "Belongs       0.653896    0.395634  12.668607  3.846629\n",
      "Competent     0.655106    0.426102  10.037396  4.745328\n",
      "Encouraged    0.851928    0.475017   7.886853  3.145807\n",
      "Heard         0.807767    0.461265   8.924229  3.603409\n",
      "LeaderOK      0.742259    0.432396  11.382774  3.874983\n",
      "ManagementOK  0.555208    0.289032  22.212952  6.119829\n",
      "ReturnsOK     0.734660    0.374678  13.562910  5.770284\n",
      "RewardsOK     0.761565    0.498833  14.858394  3.410195\n",
      "Staff         1.818657    2.675016   0.429828  0.659197\n",
      "StatusOK      0.719843    0.397299  10.831265  5.587665\n",
      "Understood    0.655716    0.461511  10.316891  3.727564\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_ALL.csv')\n",
    "\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_ALL.xlsx', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "30c133f4-e508-483a-a017-bd90bec0d24d",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay 3Needsmet [[5.53319427]]\n",
      "Stay Autonomous [[4.74142026]]\n",
      "Stay Belongs [[3.46694408]]\n",
      "Stay Competent [[4.67629199]]\n",
      "Stay LeaderOK [[3.42659458]]\n",
      "Stay Understood [[3.4161507]]\n",
      "Stay Encouraged [[2.93440468]]\n",
      "Stay Heard [[3.30274278]]\n",
      "Stay ManagementOK [[5.37340996]]\n",
      "Stay ReturnsOK [[5.57764222]]\n",
      "Stay RewardsOK [[2.92053102]]\n",
      "Stay StatusOK [[5.17772931]]\n",
      "Drained 3Needsmet [[0.52491846]]\n",
      "Drained Autonomous [[0.5284561]]\n",
      "Drained Belongs [[0.69820423]]\n",
      "Drained Competent [[0.78042949]]\n",
      "Drained LeaderOK [[0.8134498]]\n",
      "Drained Understood [[0.71873518]]\n",
      "Drained Encouraged [[0.92014427]]\n",
      "Drained Heard [[0.869568]]\n",
      "Drained ManagementOK [[0.74063439]]\n",
      "Drained ReturnsOK [[0.95494941]]\n",
      "Drained RewardsOK [[0.93241415]]\n",
      "Drained StatusOK [[0.88885033]]\n",
      "Frustrated 3Needsmet [[0.29128472]]\n",
      "Frustrated Autonomous [[0.31104319]]\n",
      "Frustrated Belongs [[0.41461199]]\n",
      "Frustrated Competent [[0.51072701]]\n",
      "Frustrated LeaderOK [[0.4564933]]\n",
      "Frustrated Understood [[0.48079721]]\n",
      "Frustrated Encouraged [[0.50437193]]\n",
      "Frustrated Heard [[0.49648027]]\n",
      "Frustrated ManagementOK [[0.3594172]]\n",
      "Frustrated ReturnsOK [[0.44637893]]\n",
      "Frustrated RewardsOK [[0.63626899]]\n",
      "Frustrated StatusOK [[0.47101652]]\n",
      "Satisfied 3Needsmet [[24.44830651]]\n",
      "Satisfied Autonomous [[19.6038748]]\n",
      "Satisfied Belongs [[15.23194015]]\n",
      "Satisfied Competent [[10.46093517]]\n",
      "Satisfied LeaderOK [[13.64229165]]\n",
      "Satisfied Understood [[12.66136381]]\n",
      "Satisfied Encouraged [[8.55936106]]\n",
      "Satisfied Heard [[10.28503887]]\n",
      "Satisfied ManagementOK [[21.05287531]]\n",
      "Satisfied ReturnsOK [[14.43020527]]\n",
      "Satisfied RewardsOK [[13.74549421]]\n",
      "Satisfied StatusOK [[11.65233717]]\n",
      "Outcome        Drained  Frustrated  Satisfied       Stay\n",
      "Factor                                                  \n",
      "3Needsmet     0.226331    0.151038  17.465220  11.152770\n",
      "Autonomous    0.226204    0.184343  12.195179   8.756412\n",
      "Belongs       0.366365    0.261501   7.362495   8.066359\n",
      "Competent     0.292551    0.238190   8.000615   4.791708\n",
      "Encouraged    0.480952    0.360441   5.315657   5.874998\n",
      "Heard         0.439193    0.293467   5.134615   6.572416\n",
      "LeaderOK      0.441174    0.342652   5.052840   8.422939\n",
      "ManagementOK  0.267657    0.197778  17.431159   9.834175\n",
      "ReturnsOK     0.361861    0.241811   8.179918   6.330535\n",
      "RewardsOK     0.427637    0.324844  12.321473   8.677083\n",
      "StatusOK      0.352321    0.202893   5.638530   5.943182\n",
      "Understood    0.394200    0.389286   4.679785   5.984253\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\3720248597.py:33: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcome        Drained  Frustrated  Satisfied      Stay\n",
      "Factor                                                 \n",
      "3Needsmet     0.524918    0.291285  24.448307  5.533194\n",
      "Autonomous    0.528456    0.311043  19.603875  4.741420\n",
      "Belongs       0.698204    0.414612  15.231940  3.466944\n",
      "Competent     0.780429    0.510727  10.460935  4.676292\n",
      "Encouraged    0.920144    0.504372   8.559361  2.934405\n",
      "Heard         0.869568    0.496480  10.285039  3.302743\n",
      "LeaderOK      0.813450    0.456493  13.642292  3.426595\n",
      "ManagementOK  0.740634    0.359417  21.052875  5.373410\n",
      "ReturnsOK     0.954949    0.446379  14.430205  5.577642\n",
      "RewardsOK     0.932414    0.636269  13.745494  2.920531\n",
      "StatusOK      0.888850    0.471017  11.652337  5.177729\n",
      "Understood    0.718735    0.480797  12.661364  3.416151\n"
     ]
    }
   ],
   "source": [
    "#  Odds ratios STAFF ONLY\n",
    "#  for staying, being satisfied, being frustrated and being drained\n",
    "#  and selected independent variables: Needs, Management, leadership\n",
    "#  using logistic regression\n",
    "#  use this to prepare odds ratio pivot table for VOL and STAFF\n",
    "\n",
    "\n",
    "# Load the data\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "# Keep only volunteers\n",
    "df = df[df['Staff'] == 0]\n",
    "\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied'] \n",
    "columnX = ['3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Factor', 'Odds ratio'])\n",
    "\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "# Save the results DataFrame to a CSV file\n",
    "results_df.to_csv('odds_ratios_VOL.csv', index=False)\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_VOL.csv')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_VOL.xlsx', index=False)\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_VOL.xlsx', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "12992b5b",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay 3Needsmet [[11.15277029]]\n",
      "Stay Autonomous [[8.75641161]]\n",
      "Stay Belongs [[8.06635861]]\n",
      "Stay Competent [[4.79170787]]\n",
      "Stay LeaderOK [[8.42293882]]\n",
      "Stay Understood [[5.98425298]]\n",
      "Stay Encouraged [[5.87499821]]\n",
      "Stay Heard [[6.5724155]]\n",
      "Stay ManagementOK [[9.83417534]]\n",
      "Stay ReturnsOK [[6.33053471]]\n",
      "Stay RewardsOK [[8.67708289]]\n",
      "Stay StatusOK [[5.94318153]]\n",
      "Drained 3Needsmet [[0.22633051]]\n",
      "Drained Autonomous [[0.22620373]]\n",
      "Drained Belongs [[0.366365]]\n",
      "Drained Competent [[0.29255106]]\n",
      "Drained LeaderOK [[0.44117423]]\n",
      "Drained Understood [[0.39419989]]\n",
      "Drained Encouraged [[0.48095201]]\n",
      "Drained Heard [[0.43919342]]\n",
      "Drained ManagementOK [[0.26765695]]\n",
      "Drained ReturnsOK [[0.36186122]]\n",
      "Drained RewardsOK [[0.42763674]]\n",
      "Drained StatusOK [[0.35232058]]\n",
      "Frustrated 3Needsmet [[0.1510384]]\n",
      "Frustrated Autonomous [[0.18434342]]\n",
      "Frustrated Belongs [[0.26150116]]\n",
      "Frustrated Competent [[0.23818962]]\n",
      "Frustrated LeaderOK [[0.34265225]]\n",
      "Frustrated Understood [[0.38928572]]\n",
      "Frustrated Encouraged [[0.36044092]]\n",
      "Frustrated Heard [[0.2934673]]\n",
      "Frustrated ManagementOK [[0.19777778]]\n",
      "Frustrated ReturnsOK [[0.24181056]]\n",
      "Frustrated RewardsOK [[0.32484408]]\n",
      "Frustrated StatusOK [[0.20289286]]\n",
      "Satisfied 3Needsmet [[17.46522044]]\n",
      "Satisfied Autonomous [[12.19517889]]\n",
      "Satisfied Belongs [[7.36249454]]\n",
      "Satisfied Competent [[8.00061497]]\n",
      "Satisfied LeaderOK [[5.05283981]]\n",
      "Satisfied Understood [[4.67978541]]\n",
      "Satisfied Encouraged [[5.31565705]]\n",
      "Satisfied Heard [[5.13461538]]\n",
      "Satisfied ManagementOK [[17.43115886]]\n",
      "Satisfied ReturnsOK [[8.17991828]]\n",
      "Satisfied RewardsOK [[12.32147322]]\n",
      "Satisfied StatusOK [[5.63853048]]\n",
      "Outcome        Drained  Frustrated  Satisfied       Stay\n",
      "Factor                                                  \n",
      "3Needsmet     0.226331    0.151038  17.465220  11.152770\n",
      "Autonomous    0.226204    0.184343  12.195179   8.756412\n",
      "Belongs       0.366365    0.261501   7.362495   8.066359\n",
      "Competent     0.292551    0.238190   8.000615   4.791708\n",
      "Encouraged    0.480952    0.360441   5.315657   5.874998\n",
      "Heard         0.439193    0.293467   5.134615   6.572416\n",
      "LeaderOK      0.441174    0.342652   5.052840   8.422939\n",
      "ManagementOK  0.267657    0.197778  17.431159   9.834175\n",
      "ReturnsOK     0.361861    0.241811   8.179918   6.330535\n",
      "RewardsOK     0.427637    0.324844  12.321473   8.677083\n",
      "StatusOK      0.352321    0.202893   5.638530   5.943182\n",
      "Understood    0.394200    0.389286   4.679785   5.984253\n",
      "Outcome        Drained  Frustrated  Satisfied       Stay\n",
      "Factor                                                  \n",
      "3Needsmet     0.226331    0.151038  17.465220  11.152770\n",
      "Autonomous    0.226204    0.184343  12.195179   8.756412\n",
      "Belongs       0.366365    0.261501   7.362495   8.066359\n",
      "Competent     0.292551    0.238190   8.000615   4.791708\n",
      "Encouraged    0.480952    0.360441   5.315657   5.874998\n",
      "Heard         0.439193    0.293467   5.134615   6.572416\n",
      "LeaderOK      0.441174    0.342652   5.052840   8.422939\n",
      "ManagementOK  0.267657    0.197778  17.431159   9.834175\n",
      "ReturnsOK     0.361861    0.241811   8.179918   6.330535\n",
      "RewardsOK     0.427637    0.324844  12.321473   8.677083\n",
      "StatusOK      0.352321    0.202893   5.638530   5.943182\n",
      "Understood    0.394200    0.389286   4.679785   5.984253\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_3244\\41191705.py:32: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    }
   ],
   "source": [
    "#  Odds ratios STAFF ONLY\n",
    "#  for staying, being satisfied, being frustrated and being drained\n",
    "#  and selected independent variables: Needs, Management, leadership\n",
    "#  using logistic regression\n",
    "#  use this to prepare odds ratio pivot table for VOL and STAFF\n",
    "\n",
    "\n",
    "# Load the data\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "# Keep only staff\n",
    "df = df[df['Staff'] == 1]\n",
    "\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied'] \n",
    "columnX = ['3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Factor', 'Odds ratio'])\n",
    "\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "# Save the results DataFrame to a CSV file\n",
    "results_df.to_csv('odds_ratios_STAFF.csv', index=False)\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_STAFF.csv')\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_STAFF.xlsx', index=False)\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_STAFF.xlsx', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e9b9032c-9f62-4a0a-8058-f0f39846b391",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(random_state=0, solver='liblinear')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Multivariate logistic regression\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "columns = ['Stay',\n",
    "           'Staff']\n",
    "\n",
    "x=df['Staff'].array.reshape(-1, 1)\n",
    "y=df['Stay'].array.reshape(-1, 1)\n",
    "\n",
    "model = LogisticRegression(solver='liblinear', random_state=0)\n",
    "model.fit(x, y)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0e60ba24-6a06-410b-8490-318eff56de68",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay Staff [[0.65919712]]\n",
      "Drained Staff [[1.81865738]]\n",
      "Frustrated Staff [[2.67501568]]\n",
      "Satisfied Staff [[0.42982768]]\n",
      "Ideas Staff [[1.49082609]]\n",
      "Meaning Staff [[0.8026106]]\n",
      "Values Staff [[0.61812661]]\n",
      "3Needsmet Staff [[0.88780468]]\n",
      "Autonomous Staff [[0.75635488]]\n",
      "Belongs Staff [[1.0229264]]\n",
      "Competent Staff [[0.82032391]]\n",
      "LeaderOK Staff [[0.84469537]]\n",
      "Understood Staff [[0.92950299]]\n",
      "Encouraged Staff [[0.81880787]]\n",
      "Heard Staff [[0.9763152]]\n",
      "ManagementOK Staff [[0.44612782]]\n",
      "ReturnsOK Staff [[0.55594312]]\n",
      "RewardsOK Staff [[0.5759825]]\n",
      "StatusOK Staff [[0.75269709]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\1560486856.py:28: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create forest plot to compare odds for staff compared to volunteers\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "# Count the total number of respondents (n)\n",
    "n = df['Volunteer'].sum() + df['Staff'].sum()\n",
    "\n",
    "#prepare the data to compute the Odds Ratios\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied', 'Ideas', 'Meaning', 'Values',\n",
    "           '3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK'] \n",
    "columnX = ['Staff']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Staff', 'Odds ratio'])\n",
    "\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Staff': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "sns.pointplot(\n",
    "    data=results_df, x=\"Odds ratio\", y=\"Outcome\",\n",
    "    errorbar=(\"pi\", 100), capsize=.4, join=False, color=\".5\",\n",
    ")\n",
    "\n",
    "# Add the vertical line to the first subplot\n",
    "plt.axvline(x=1, color='gray', linestyle='--')\n",
    "\n",
    "plt.title('Odd ratios: staff compared to volunteers')\n",
    "\n",
    "plt.savefig('ALL_OR_forestplot.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "233edad1-cc64-43bd-b188-a396c903b1bc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# heatmap to represent odds ratios for all data, staff and volunteers combined\n",
    "sns.set_theme()\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_ALL.csv')\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Draw a heatmap with the numeric values in each cell\n",
    "f, ax = plt.subplots(figsize=(9, 6))\n",
    "sns.heatmap(pivot_table, annot=True, fmt=\".1f\", vmin=0, vmax=25, linewidths=.5, ax=ax)\n",
    "ax.xaxis.tick_top()\n",
    "#ax.set_xlabel('Outcome', x=0.5)\n",
    "\n",
    "\n",
    "plt.title('Odds ratios for selected motivational factors and outcomes', x=0.5, y=1.1, fontsize=15)\n",
    "\n",
    "# Save the plot as an image file\n",
    "plt.savefig('ALL_OR_heatmap.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "60adce03-3ad0-467d-b155-4110a4b52a44",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stay 3Needsmet [[3.32955772]]\n",
      "Stay Autonomous [[2.85526717]]\n",
      "Stay Belongs [[2.22426155]]\n",
      "Stay Competent [[2.50621994]]\n",
      "Stay LeaderOK [[2.86849943]]\n",
      "Stay Understood [[2.36467787]]\n",
      "Stay Encouraged [[2.66447989]]\n",
      "Stay Heard [[2.91450118]]\n",
      "Stay ManagementOK [[4.41900765]]\n",
      "Stay ReturnsOK [[6.15307514]]\n",
      "Stay RewardsOK [[2.28108339]]\n",
      "Stay StatusOK [[3.06581353]]\n",
      "Drained 3Needsmet [[0.56311124]]\n",
      "Drained Autonomous [[0.55585272]]\n",
      "Drained Belongs [[0.67227227]]\n",
      "Drained Competent [[0.88937498]]\n",
      "Drained LeaderOK [[0.67232829]]\n",
      "Drained Understood [[0.62324831]]\n",
      "Drained Encouraged [[0.78313146]]\n",
      "Drained Heard [[0.68275641]]\n",
      "Drained ManagementOK [[0.65512695]]\n",
      "Drained ReturnsOK [[0.64085735]]\n",
      "Drained RewardsOK [[0.85348449]]\n",
      "Drained StatusOK [[1.05257664]]\n",
      "Frustrated 3Needsmet [[0.30614089]]\n",
      "Frustrated Autonomous [[0.28675999]]\n",
      "Frustrated Belongs [[0.39738926]]\n",
      "Frustrated Competent [[0.5948206]]\n",
      "Frustrated LeaderOK [[0.32974074]]\n",
      "Frustrated Understood [[0.38341801]]\n",
      "Frustrated Encouraged [[0.36603503]]\n",
      "Frustrated Heard [[0.3646188]]\n",
      "Frustrated ManagementOK [[0.32739728]]\n",
      "Frustrated ReturnsOK [[0.30932204]]\n",
      "Frustrated RewardsOK [[0.586077]]\n",
      "Frustrated StatusOK [[0.48102215]]\n",
      "Satisfied 3Needsmet [[29.01849001]]\n",
      "Satisfied Autonomous [[17.66065908]]\n",
      "Satisfied Belongs [[14.39553997]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Satisfied Competent [[7.02728325]]\n",
      "Satisfied LeaderOK [[14.54482781]]\n",
      "Satisfied Understood [[16.2745357]]\n",
      "Satisfied Encouraged [[7.17594659]]\n",
      "Satisfied Heard [[12.32460515]]\n",
      "Satisfied ManagementOK [[16.45714238]]\n",
      "Satisfied ReturnsOK [[16.08790207]]\n",
      "Satisfied RewardsOK [[13.85297317]]\n",
      "Satisfied StatusOK [[9.41426657]]\n",
      "Meaning 3Needsmet [[14.92438308]]\n",
      "Meaning Autonomous [[10.0032919]]\n",
      "Meaning Belongs [[13.91926277]]\n",
      "Meaning Competent [[4.57217944]]\n",
      "Meaning LeaderOK [[9.7199091]]\n",
      "Meaning Understood [[8.94164815]]\n",
      "Meaning Encouraged [[6.74747392]]\n",
      "Meaning Heard [[8.93576742]]\n",
      "Meaning ManagementOK [[10.89341414]]\n",
      "Meaning ReturnsOK [[11.64585162]]\n",
      "Meaning RewardsOK [[5.19985163]]\n",
      "Meaning StatusOK [[5.75329496]]\n",
      "Values 3Needsmet [[9.29603631]]\n",
      "Values Autonomous [[7.0035437]]\n",
      "Values Belongs [[9.43864388]]\n",
      "Values Competent [[3.03887129]]\n",
      "Values LeaderOK [[5.63445474]]\n",
      "Values Understood [[5.2163441]]\n",
      "Values Encouraged [[4.61111169]]\n",
      "Values Heard [[5.01535262]]\n",
      "Values ManagementOK [[6.68218539]]\n",
      "Values ReturnsOK [[6.6161152]]\n",
      "Values RewardsOK [[3.92536374]]\n",
      "Values StatusOK [[4.68727833]]\n",
      "Ideas 3Needsmet [[9.80220021]]\n",
      "Ideas Autonomous [[8.79783097]]\n",
      "Ideas Belongs [[7.95370335]]\n",
      "Ideas Competent [[7.44691291]]\n",
      "Ideas LeaderOK [[4.80285165]]\n",
      "Ideas Understood [[5.29017219]]\n",
      "Ideas Encouraged [[4.73519604]]\n",
      "Ideas Heard [[5.3262404]]\n",
      "Ideas ManagementOK [[9.40404052]]\n",
      "Ideas ReturnsOK [[11.20479001]]\n",
      "Ideas RewardsOK [[5.99097984]]\n",
      "Ideas StatusOK [[8.79086686]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1173: FutureWarning: `penalty='none'`has been deprecated in 1.2 and will be removed in 1.4. To keep the past behaviour, set `penalty=None`.\n",
      "  warnings.warn(\n",
      "C:\\Users\\gabriel.pictet\\AppData\\Local\\Temp\\ipykernel_16092\\244925654.py:34: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#  COUNTRY PROFILE: LEBANON\n",
    "#  Odds ratios for staying, being staisfied, being frustrated  and being drained\n",
    "#  and selected independent variables: Needs, Management, leadership\n",
    "#  using logistic regression\n",
    "#  use this to prepare odds ratio pivot table for VOL and STAFF and heatmap\n",
    "\n",
    "from scipy.stats import fisher_exact\n",
    "import itertools\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/LogReg_df.csv')\n",
    "\n",
    "# Filter the dataframe for 'country' = 'Lebanon'\n",
    "df = df[df['country'] == 'Lebanon']\n",
    "\n",
    "columnY = ['Stay', 'Drained', 'Frustrated', 'Satisfied', 'Meaning', 'Values', 'Ideas'] \n",
    "columnX = ['3Needsmet', 'Autonomous', 'Belongs', 'Competent',\n",
    "           'LeaderOK', 'Understood', 'Encouraged', 'Heard',\n",
    "           'ManagementOK', 'ReturnsOK', 'RewardsOK', 'StatusOK']\n",
    "\n",
    "#create the dataframe that will store the outputs\n",
    "results_df= pd.DataFrame(columns=['Outcome', 'Factor', 'Odds ratio'])\n",
    "\n",
    "for Y in columnY:\n",
    "    for X in columnX:\n",
    "        clf = LogisticRegression(penalty='none')\n",
    "        # Reshape the data to be 2D\n",
    "        X_data = df[X].values.reshape(-1, 1)\n",
    "        Y_data = df[Y]\n",
    "        clf.fit(X_data, Y_data)\n",
    "        odds_ratio = np.exp(clf.coef_)\n",
    "        print(Y, X, odds_ratio)\n",
    "        # Append results to the results_df DataFrame\n",
    "        results_df = results_df.append({'Outcome': Y, 'Factor': X, 'Odds ratio': odds_ratio[0][0]}, ignore_index=True)\n",
    "\n",
    "# Display the results DataFrame\n",
    "#print(results_df)\n",
    "\n",
    "# Save the results DataFrame to a CSV file\n",
    "results_df.to_csv('odds_ratios_Lebanon.csv', index=False)\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = results_df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Display the pivot_table\n",
    "#print(pivot_table)\n",
    "\n",
    "# Save the Pivot table DataFrame to a CSV file\n",
    "pivot_table.to_excel('odds_ratios_PivotTable_Lebanon.xlsx', index=False)      \n",
    "\n",
    "# heatmap to represent odds ratios for LEBANESE RED CROSS only (all are volunteers)\n",
    "sns.set_theme()\n",
    "\n",
    "df = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_Lebanon.csv')\n",
    "\n",
    "# Pivot the results_df DataFrame\n",
    "pivot_table = df.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Draw a heatmap with the numeric values in each cell\n",
    "f, ax = plt.subplots(figsize=(9, 6))\n",
    "sns.heatmap(pivot_table, annot=True, fmt=\".1f\", vmin=0, vmax=25, linewidths=.5, ax=ax)\n",
    "ax.xaxis.tick_top()\n",
    "#ax.set_xlabel('Outcome', x=0.5)\n",
    "\n",
    "plt.text(5.5, 13, \"Source: IFRC (2023)/Motiro.com\", fontdict={'size': 10})\n",
    "plt.title('LRC: Odds ratios for selected motivational factors and outcomes', x=0.5, y=1.1, fontsize=15)\n",
    "\n",
    "# Save the plot as an image file\n",
    "plt.savefig('Lebanon_OR_heatmap.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "20411b1a-b393-44ed-96ea-9db3ca1574d2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Heatmap comparing Odds ratios for volunteers and staff\n",
    "\n",
    "# Read volunteer and staff Odd ratio dataframes prepared above\n",
    "df_volunteer = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_VOL.csv')\n",
    "df_staff = pd.read_csv('C:/Users/gabriel.pictet/Documents/Gabriel/REAL/Moti/Moti data/odds_ratios_STAFF.csv')\n",
    "\n",
    "# Pivot the DataFrames\n",
    "pivot_table_VOL = df_volunteer.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "pivot_table_STAFF = df_staff.pivot(index='Factor', columns='Outcome', values='Odds ratio')\n",
    "\n",
    "# Create a figure with two subplots\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\n",
    "\n",
    "# Plot the density heatmap for Volunteers\n",
    "sns.heatmap(pivot_table_VOL, annot=True, fmt=\".1f\", vmin=0, vmax=25, linewidths=.5, ax=ax1)\n",
    "ax1.set_xlabel(\"\")\n",
    "ax1.set_ylabel(\"\")\n",
    "ax1.set_title(\"Volunteer\", fontsize=16, x=0.5, y=-0.1) # Change y value\n",
    "ax1.xaxis.tick_top()\n",
    "\n",
    "# Plot the density heatmap for Staff\n",
    "sns.heatmap(pivot_table_STAFF, annot=True, fmt=\".1f\", vmin=0, vmax=25, linewidths=.5, ax=ax2)\n",
    "ax2.set_xlabel(\"\")\n",
    "ax2.set_ylabel(\"\")\n",
    "ax2.set_title('Staff', fontsize=16, x=0.5, y=-0.1) # Change y value\n",
    "ax2.xaxis.tick_top()\n",
    "\n",
    "# Divider code (commented out in your provided code, kept as is)\n",
    "#divider1 = make_axes_locatable(ax1)\n",
    "#cax1 = divider1.append_axes(\"bottom\", size=\"5%\", pad=0.5)\n",
    "#cbar1 = plt.colorbar(hex1, cax=cax1, orientation='horizontal')\n",
    "#cbar1.set_label('Density')\n",
    "\n",
    "#divider2 = make_axes_locatable(ax2)\n",
    "#cax2 = divider2.append_axes(\"bottom\", size=\"5%\", pad=0.5)\n",
    "#cbar2 = plt.colorbar(hex2, cax=cax2, orientation='horizontal')\n",
    "#cbar2.set_label('Density')\n",
    "\n",
    "# Adjust the spacing between subplots\n",
    "#plt.tight_layout()\n",
    "plt.suptitle('Odds ratios for selected motivational factors and outcomes', x=0.5, y=1, fontsize=20)\n",
    "\n",
    "# Save the plot as an image file\n",
    "plt.savefig('VOL-STAFF_OR_heatmap.png')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0860af3-caed-4c70-ac82-0e3ec11dcbb9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
